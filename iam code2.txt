module "cloud-security-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_security_poweruser"
  title                = "cloud security power user"
  description          = "cloud security power user custom role"
  base_roles           = ["roles/resourcemanager.organizationViewer", "roles/orgpolicy.policyViewer", "roles/securitycenter.adminViewer", "roles/logging.privateLogViewer", "roles/container.viewer", "roles/compute.viewer", "roles/bigquery.dataViewer", "roles/securitycenter.admin"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-CloudSec@amex.com"]
  permissions          = []
}

module "infosec-audit" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_infosecaudit_viewer"
  title                = "infosec audit"
  description          = "infosec audit custom role"
  base_roles           = ["roles/resourcemanager.organizationViewer", "roles/iam.securityReviewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-AAE3-Compl-SecGCPInfosecAudit@amex.com"]
  permissions          = []
}

module "iam-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_iam_poweruser"
  title                = "iam power user"
  description          = "iam power user custom role"
  base_roles           = ["roles/iam.organizationRoleViewer", "roles/iam.workloadIdentityPoolViewer", "roles/iam.securityReviewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-IAM@amex.com"]
  permissions          = []
}

module "network-security-eng-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_netsec_poweruser"
  title                = "network security eng power user"
  description          = "network security eng power user custom role"
  base_roles           = ["roles/compute.orgFirewallPolicyAdmin", "roles/accesscontextmanager.policyReader"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-NetSec@amex.com", "group:PRC-AXP-BAE2-AppAdminGCPNetSecOps@amex.com"]
  permissions          = []
}

module "siem-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_siem_poweruser"
  title                = "siem poweruser"
  description          = "siem poweruser custom role"
  base_roles           = ["roles/logging.viewer", "roles/monitoring.viewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-SIEM@amex.com"]
  permissions          = []
}

module "ir-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_ir_poweruser"
  title                = "ir poweruser"
  description          = "ir poweruser custom role"
  base_roles           = ["roles/resourcemanager.organizationViewer", "roles/securitycenter.adminViewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCPInfosecMonitoring@amex.com"]
  permissions          = []
}

module "crypto-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_crypto_poweruser"
  title                = "crypto poweruser"
  description          = "crypto poweruser custom role"
  base_roles           = ["roles/cloudkms.admin"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-Crypto@amex.com"]
  permissions          = []
}

module "cloudeng-admin" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_corefoundation_admin"
  title                = "cloudeng admin"
  description          = "cloudeng admin custom role"
  base_roles           = ["roles/resourcemanager.organizationAdmin", "roles/resourcemanager.folderAdmin", "roles/resourcemanager.projectCreator", "roles/billing.user", "roles/billing.viewer", "roles/iam.organizationRoleViewer", "roles/orgpolicy.policyAdmin", "roles/cloudsupport.admin", "roles/container.admin", "roles/compute.admin", "roles/logging.admin", "roles/monitoring.admin", "roles/iam.serviceAccountUser"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-CF@amex.com"]
  permissions          = []
}


module "cloudeng-powersuer" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_corefoundation_poweruser"
  title                = "cloudeng poweruser"
  description          = "cloudeng poweruser custom role"
  base_roles           = ["roles/resourcemanager.organizationViewer", "roles/resourcemanager.folderViewer", "roles/billing.viewer", "roles/iam.organizationRoleViewer", "roles/orgpolicy.policyViewer", "roles/cloudsupport.techSupportViewer", "roles/container.viewer", "roles/compute.viewer", "roles/logging.viewer", "roles/monitoring.viewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-C@amex.com"]
  permissions          = []
}

module "ddi-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_ddi_poweruser"
  title                = "ddi poweruser"
  description          = "ddi poweruser custom role"
  base_roles           = ["roles/dns.reader"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-AAE2-AppAdminGCP-DDI@amex.com"]
  permissions          = []
}


module "billing-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_billing_viewer"
  title                = "billing poweruser"
  description          = "billing poweruser custom role"
  base_roles           = ["roles/billing.viewer", "roles/resourcemanager.organizationViewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-Billing@amex.com"]
  permissions          = []
}

module "network-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_network_poweruser"
  title                = "network poweruser"
  description          = "network poweruser custom role"
  base_roles           = ["roles/compute.networkViewer", "roles/resourcemanager.folderViewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE3-AppAdminAWS-DCE@amex.com", "PRC-AXP-BAE3-AppAdminAWS-GNOC@amex.com"]
  permissions          = []
}

module "product-poweruser" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_product_puE0:E1-E3"
  title                = "product poweruser"
  description          = "product poweruser custom role"
  base_roles           = ["roles/cloudasset.viewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-PUE2-AppSuppGCP-CEProduct@amex.com"]
  permissions          = []
}

=========================================================

module "cloudeng-admin" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_corefoundation_admin"
  title                = "cloudeng admin"
  description          = "cloudeng admin custom role"
  base_roles           = ["roles/resourcemanager.organizationAdmin", "roles/resourcemanager.folderAdmin", "roles/resourcemanager.projectCreator", "roles/billing.user", "roles/billing.viewer", "roles/iam.organizationRoleViewer", "roles/orgpolicy.policyAdmin", "roles/cloudsupport.admin", "roles/container.admin", "roles/compute.admin", "roles/logging.admin", "roles/monitoring.admin", "roles/iam.serviceAccountUser"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-CF@amex.com"]
  permissions          = []
}

/* permission for cloudeng admin 
   permissions = [
          + "compute.images.create",
          + "compute.images.delete",
          + "compute.images.deprecate",
          + "compute.images.get",
          + "compute.images.getFromFamily",
          + "compute.images.getIamPolicy",
          + "compute.images.list",
          + "compute.images.setIamPolicy",
          + "compute.images.setLabels",
          + "compute.images.update",
          + "compute.images.useReadOnly",
          + "compute.instanceGroupManagers.create",
          + "compute.instanceGroupManagers.delete",
          + "compute.instanceGroupManagers.get",
          + "compute.instanceGroupManagers.list",
          + "compute.instanceGroupManagers.update",
          + "compute.instanceGroupManagers.use",
          + "compute.instanceGroups.create",
          + "compute.instanceGroups.delete",
          + "compute.instanceGroups.get",
          + "compute.instanceGroups.list",
          + "compute.instanceGroups.update",
          + "compute.instanceGroups.use",
          + "compute.instanceTemplates.create",
          + "compute.instanceTemplates.delete",
          + "compute.instanceTemplates.get",
          + "compute.instanceTemplates.getIamPolicy",
          + "compute.instanceTemplates.list",
          + "compute.instanceTemplates.setIamPolicy",
          + "compute.instanceTemplates.useReadOnly",
          + "compute.instances.addAccessConfig",
          + "compute.instances.addMaintenancePolicies",
          + "compute.instances.addResourcePolicies",
          + "compute.instances.attachDisk",
          + "compute.instances.create",
          + "compute.instances.delete",
          + "compute.instances.deleteAccessConfig",
          + "compute.instances.detachDisk",
          + "compute.instances.get",
          + "compute.instances.getEffectiveFirewalls",
          + "compute.instances.getGuestAttributes",
          + "compute.instances.getIamPolicy",
          + "compute.instances.getScreenshot",
          + "compute.instances.getSerialPortOutput",
          + "compute.instances.getShieldedInstanceIdentity",
          + "compute.instances.getShieldedVmIdentity",
          + "compute.instances.list",
          + "compute.instances.listReferrers",
          + "compute.instances.osAdminLogin",
          + "compute.instances.osLogin",
          + "compute.instances.removeMaintenancePolicies",
          + "compute.instances.removeResourcePolicies",
          + "compute.instances.reset",
          + "compute.instances.resume",
          + "compute.instances.sendDiagnosticInterrupt",
          + "compute.instances.setDeletionProtection",
          + "compute.instances.setDiskAutoDelete",
          + "compute.instances.setIamPolicy",
          + "compute.instances.setLabels",
          + "compute.instances.setMachineResources",
          + "compute.instances.setMachineType",
          + "compute.instances.setMetadata",
          + "compute.instances.setMinCpuPlatform",
          + "compute.instances.setScheduling",
          + "compute.instances.setServiceAccount",
          + "compute.instances.setShieldedInstanceIntegrityPolicy",
          + "compute.instances.setShieldedVmIntegrityPolicy",
          + "compute.instances.setTags",
          + "compute.instances.start",
          + "compute.instances.startWithEncryptionKey",
          + "compute.instances.stop",
          + "compute.instances.suspend",
          + "compute.instances.update",
          + "compute.instances.updateAccessConfig",
          + "compute.instances.updateDisplayDevice",
          + "compute.instances.updateNetworkInterface",
          + "compute.instances.updateSecurity",
          + "compute.instances.updateShieldedInstanceConfig",
          + "compute.instances.updateShieldedVmConfig",
          + "compute.instances.use",
          + "compute.instances.useReadOnly",
          + "compute.interconnectAttachments.create",
          + "compute.interconnectAttachments.delete",
          + "compute.interconnectAttachments.get",
          + "compute.interconnectAttachments.list",
          + "compute.interconnectAttachments.setLabels",
          + "compute.interconnectAttachments.update",
          + "compute.interconnectAttachments.use",
          + "compute.interconnectLocations.get",
          + "compute.interconnectLocations.list",
          + "compute.interconnects.create",
          + "compute.interconnects.delete",
          + "compute.interconnects.get",
          + "compute.interconnects.list",
          + "compute.interconnects.setLabels",
          + "compute.interconnects.update",
          + "compute.interconnects.use",
          + "compute.licenseCodes.get",
          + "compute.licenseCodes.getIamPolicy",
          + "compute.licenseCodes.list",
          + "compute.licenseCodes.setIamPolicy",
          + "compute.licenseCodes.update",
          + "compute.licenseCodes.use",
          + "compute.licenses.create",
          + "compute.licenses.delete",
          + "compute.licenses.get",
          + "compute.licenses.getIamPolicy",
          + "compute.licenses.list",
          + "compute.licenses.setIamPolicy",
          + "compute.machineImages.create",
          + "compute.machineImages.delete",
          + "compute.machineImages.get",
          + "compute.machineImages.getIamPolicy",
          + "compute.machineImages.list",
          + "compute.machineImages.setIamPolicy",
          + "compute.machineImages.useReadOnly",
          + "compute.machineTypes.get",
          + "compute.machineTypes.list",
          + "compute.maintenancePolicies.create",
          + "compute.maintenancePolicies.delete",
          + "compute.maintenancePolicies.get",
          + "compute.maintenancePolicies.getIamPolicy",
          + "compute.maintenancePolicies.list",
          + "compute.maintenancePolicies.setIamPolicy",
          + "compute.maintenancePolicies.use",
          + "compute.networkEndpointGroups.attachNetworkEndpoints",
          + "compute.networkEndpointGroups.create",
          + "compute.networkEndpointGroups.delete",
          + "compute.networkEndpointGroups.detachNetworkEndpoints",
          + "compute.networkEndpointGroups.get",
          + "compute.networkEndpointGroups.getIamPolicy",
          + "compute.networkEndpointGroups.list",
          + "compute.networkEndpointGroups.setIamPolicy",
          + "compute.networkEndpointGroups.use",
          + "compute.networks.access",
          + "compute.networks.addPeering",
          + "compute.networks.create",
          + "compute.networks.delete",
          + "compute.networks.get",
          + "compute.networks.getEffectiveFirewalls",
          + "compute.networks.list",
          + "compute.networks.listPeeringRoutes",
          + "compute.networks.mirror",
          + "compute.networks.removePeering",
          + "compute.networks.switchToCustomMode",
          + "compute.networks.update",
          + "compute.networks.updatePeering",
          + "compute.networks.updatePolicy",
          + "compute.networks.use",
          + "compute.networks.useExternalIp",
          + "compute.nodeGroups.addNodes",
          + "compute.nodeGroups.create",
          + "compute.nodeGroups.delete",
          + "compute.nodeGroups.deleteNodes",
          + "compute.nodeGroups.get",
          + "compute.nodeGroups.getIamPolicy",
          + "compute.nodeGroups.list",
          + "compute.nodeGroups.setIamPolicy",
          + "compute.nodeGroups.setNodeTemplate",
          + "compute.nodeGroups.update",
          + "compute.nodeTemplates.create",
          + "compute.nodeTemplates.delete",
          + "compute.nodeTemplates.get",
          + "compute.nodeTemplates.getIamPolicy",
          + "compute.nodeTemplates.list",
          + "compute.nodeTemplates.setIamPolicy",
          + "compute.nodeTypes.get",
          + "compute.nodeTypes.list",
          + "compute.organizations.disableXpnHost",
          + "compute.organizations.disableXpnResource",
          + "compute.organizations.enableXpnHost",
          + "compute.organizations.enableXpnResource",
          + "compute.organizations.listAssociations",
          + "compute.organizations.setFirewallPolicy",
          + "compute.organizations.setSecurityPolicy",
          + "compute.oslogin.updateExternalUser",
          + "compute.packetMirrorings.update",
          + "compute.projects.get",
          + "compute.projects.setCommonInstanceMetadata",
          + "compute.projects.setDefaultNetworkTier",
          + "compute.projects.setDefaultServiceAccount",
          + "compute.projects.setUsageExportBucket",
          + "compute.publicAdvertisedPrefixes.create",
          + "compute.publicAdvertisedPrefixes.delete",
          + "compute.publicAdvertisedPrefixes.get",
          + "compute.publicAdvertisedPrefixes.list",
          + "compute.publicAdvertisedPrefixes.update",
          + "compute.publicAdvertisedPrefixes.updatePolicy",
          + "compute.publicAdvertisedPrefixes.use",
          + "compute.publicDelegatedPrefixes.create",
          + "compute.publicDelegatedPrefixes.delete",
          + "compute.publicDelegatedPrefixes.get",
          + "compute.publicDelegatedPrefixes.list",
          + "compute.publicDelegatedPrefixes.update",
          + "compute.publicDelegatedPrefixes.updatePolicy",
          + "compute.publicDelegatedPrefixes.use",
          + "compute.regionBackendServices.create",
          + "compute.regionBackendServices.delete",
          + "compute.regionBackendServices.get",
          + "compute.regionBackendServices.getIamPolicy",
          + "compute.regionBackendServices.list",
          + "compute.regionBackendServices.setIamPolicy",
          + "compute.regionBackendServices.setSecurityPolicy",
          + "compute.regionBackendServices.update",
          + "compute.regionBackendServices.use",
          + "compute.regionHealthCheckServices.create",
          + "compute.regionHealthCheckServices.delete",
          + "compute.regionHealthCheckServices.get",
          + "compute.regionHealthCheckServices.list",
          + "compute.regionHealthCheckServices.update",
          + "compute.regionHealthCheckServices.use",
          + "compute.regionHealthChecks.create",
          + "compute.regionHealthChecks.delete",
          + "compute.regionHealthChecks.get",
          + "compute.regionHealthChecks.list",
          + "compute.regionHealthChecks.update",
          + "compute.regionHealthChecks.use",
          + "compute.regionHealthChecks.useReadOnly",
          + "compute.regionNetworkEndpointGroups.create",
          + "compute.regionNetworkEndpointGroups.delete",
          + "compute.regionNetworkEndpointGroups.get",
          + "compute.regionNetworkEndpointGroups.list",
          + "compute.regionNetworkEndpointGroups.use",
          + "compute.regionNotificationEndpoints.create",
          + "compute.regionNotificationEndpoints.delete",
          + "compute.regionNotificationEndpoints.get",
          + "compute.regionNotificationEndpoints.list",
          + "compute.regionNotificationEndpoints.update",
          + "compute.regionNotificationEndpoints.use",
          + "compute.regionOperations.delete",
          + "compute.regionOperations.get",
          + "compute.regionOperations.getIamPolicy",
          + "compute.regionOperations.list",
          + "compute.regionOperations.setIamPolicy",
          + "compute.regionSslCertificates.create",
          + "compute.regionSslCertificates.delete",
          + "compute.regionSslCertificates.get",
          + "compute.regionSslCertificates.list",
          + "compute.regionTargetHttpProxies.create",
          + "compute.regionTargetHttpProxies.delete",
          + "compute.regionTargetHttpProxies.get",
          + "compute.regionTargetHttpProxies.list",
          + "compute.regionTargetHttpProxies.setUrlMap",
          + "compute.regionTargetHttpProxies.use",
          + "compute.regionTargetHttpsProxies.create",
          + "compute.regionTargetHttpsProxies.delete",
          + "compute.regionTargetHttpsProxies.get",
          + "compute.regionTargetHttpsProxies.list",
          + "compute.regionTargetHttpsProxies.setSslCertificates",
          + "compute.regionTargetHttpsProxies.setUrlMap",
          + "compute.regionTargetHttpsProxies.use",
          + "compute.regionUrlMaps.create",
          + "compute.regionUrlMaps.delete",
          + "compute.regionUrlMaps.get",
          + "compute.regionUrlMaps.invalidateCache",
          + "compute.regionUrlMaps.list",
          + "compute.regionUrlMaps.update",
          + "compute.regionUrlMaps.use",
          + "compute.regionUrlMaps.validate",
          + "compute.regions.get",
          + "compute.regions.list",
          + "compute.reservations.create",
          + "compute.reservations.delete",
          + "compute.reservations.get",
          + "compute.reservations.list",
          + "compute.reservations.resize",
          + "compute.reservations.update",
          + "compute.resourcePolicies.create",
          + "compute.resourcePolicies.delete",
          + "compute.resourcePolicies.get",
          + "compute.resourcePolicies.list",
          + "compute.resourcePolicies.use",
          + "compute.routers.create",
          + "compute.routers.delete",
          + "compute.routers.get",
          + "compute.routers.list",
          + "compute.routers.update",
          + "compute.routers.use",
          + "compute.routes.create",
          + "compute.routes.delete",
          + "compute.routes.get",
          + "compute.routes.list",
          + "compute.securityPolicies.addAssociation",
          + "compute.securityPolicies.copyRules",
          + "compute.securityPolicies.create",
          + "compute.securityPolicies.delete",
          + "compute.securityPolicies.get",
          + "compute.securityPolicies.getIamPolicy",
          + "compute.securityPolicies.list",
          + "compute.securityPolicies.move",
          + "compute.securityPolicies.removeAssociation",
          + "compute.securityPolicies.setIamPolicy",
          + "compute.securityPolicies.update",
          + "compute.securityPolicies.use",
          + "compute.serviceAttachments.create",
          + "compute.serviceAttachments.delete",
          + "compute.serviceAttachments.get",
          + "compute.serviceAttachments.list",
          + "compute.serviceAttachments.update",
          + "compute.snapshots.create",
          + "compute.snapshots.delete",
          + "compute.snapshots.get",
          + "compute.snapshots.getIamPolicy",
          + "compute.snapshots.list",
          + "compute.snapshots.setIamPolicy",
          + "compute.snapshots.setLabels",
          + "compute.snapshots.useReadOnly",
          + "compute.sslCertificates.create",
          + "compute.sslCertificates.delete",
          + "compute.sslCertificates.get",
          + "compute.sslCertificates.list",
          + "compute.sslPolicies.create",
          + "compute.sslPolicies.delete",
          + "compute.sslPolicies.get",
          + "compute.sslPolicies.list",
          + "compute.sslPolicies.listAvailableFeatures",
          + "compute.sslPolicies.update",
          + "compute.sslPolicies.use",
          + "compute.subnetworks.create",
          + "compute.subnetworks.delete",
          + "compute.subnetworks.expandIpCidrRange",
          + "compute.subnetworks.get",
          + "compute.subnetworks.getIamPolicy",
          + "compute.subnetworks.list",
          + "compute.subnetworks.mirror",
          + "compute.subnetworks.setIamPolicy",
          + "compute.subnetworks.setPrivateIpGoogleAccess",
          + "compute.subnetworks.update",
          + "compute.subnetworks.use",
          + "compute.subnetworks.useExternalIp",
          + "compute.targetGrpcProxies.create",
          + "compute.targetGrpcProxies.delete",
          + "compute.targetGrpcProxies.get",
          + "compute.targetGrpcProxies.list",
          + "compute.targetGrpcProxies.update",
          + "compute.targetGrpcProxies.use",
          + "compute.targetHttpProxies.create",
          + "compute.targetHttpProxies.delete",
          + "compute.targetHttpProxies.get",
          + "compute.targetHttpProxies.list",
          + "compute.targetHttpProxies.setUrlMap",
          + "compute.targetHttpProxies.use",
          + "compute.targetHttpsProxies.create",
          + "compute.targetHttpsProxies.delete",
          + "compute.targetHttpsProxies.get",
          + "compute.targetHttpsProxies.list",
          + "compute.targetHttpsProxies.setSslCertificates",
          + "compute.targetHttpsProxies.setSslPolicy",
          + "compute.targetHttpsProxies.setUrlMap",
          + "compute.targetHttpsProxies.use",
          + "compute.targetInstances.create",
          + "compute.targetInstances.delete",
          + "compute.targetInstances.get",
          + "compute.targetInstances.list",
          + "compute.targetInstances.use",
          + "compute.targetPools.addHealthCheck",
          + "compute.targetPools.addInstance",
          + "compute.targetPools.create",
          + "compute.targetPools.delete",
          + "compute.targetPools.get",
          + "compute.targetPools.list",
          + "compute.targetPools.removeHealthCheck",
          + "compute.targetPools.removeInstance",
          + "compute.targetPools.update",
          + "compute.targetPools.use",
          + "compute.targetSslProxies.create",
          + "compute.targetSslProxies.delete",
          + "compute.targetSslProxies.get",
          + "compute.targetSslProxies.list",
          + "compute.targetSslProxies.setBackendService",
          + "compute.targetSslProxies.setProxyHeader",
          + "compute.targetSslProxies.setSslCertificates",
          + "compute.targetSslProxies.use",
          + "compute.targetTcpProxies.create",
          + "compute.targetTcpProxies.delete",
          + "compute.targetTcpProxies.get",
          + "compute.targetTcpProxies.list",
          + "compute.targetTcpProxies.update",
          + "compute.targetTcpProxies.use",
          + "compute.targetVpnGateways.create",
          + "compute.targetVpnGateways.delete",
          + "compute.targetVpnGateways.get",
          + "compute.targetVpnGateways.list",
          + "compute.targetVpnGateways.setLabels",
          + "compute.targetVpnGateways.use",
          + "compute.urlMaps.create",
          + "compute.urlMaps.delete",
          + "compute.urlMaps.get",
          + "compute.urlMaps.invalidateCache",
          + "compute.urlMaps.list",
          + "compute.urlMaps.update",
          + "compute.urlMaps.use",
          + "compute.urlMaps.validate",
          + "compute.vpnGateways.create",
          + "compute.vpnGateways.delete",
          + "compute.vpnGateways.get",
          + "compute.vpnGateways.list",
          + "compute.vpnGateways.setLabels",
          + "compute.vpnGateways.use",
          + "compute.vpnTunnels.create",
          + "compute.vpnTunnels.delete",
          + "compute.vpnTunnels.get",
          + "compute.vpnTunnels.list",
          + "compute.vpnTunnels.setLabels",
          + "compute.zoneOperations.delete",
          + "compute.zoneOperations.get",
          + "compute.zoneOperations.getIamPolicy",
          + "compute.zoneOperations.list",
          + "compute.zoneOperations.setIamPolicy",
          + "compute.zones.get",
          + "compute.zones.list",
          + "consumerprocurement.accounts.get",
          + "consumerprocurement.accounts.list",
          + "consumerprocurement.orders.get",
          + "consumerprocurement.orders.list",
          + "container.apiServices.create",
          + "container.apiServices.delete",
          + "container.apiServices.get",
          + "container.apiServices.getStatus",
          + "container.apiServices.list",
          + "container.apiServices.update",
          + "container.apiServices.updateStatus",
          + "container.auditSinks.create",
          + "container.auditSinks.delete",
          + "container.auditSinks.get",
          + "container.auditSinks.list",
          + "container.auditSinks.update",
          + "container.backendConfigs.create",
          + "container.backendConfigs.delete",
          + "container.backendConfigs.get",
          + "container.backendConfigs.list",
          + "container.backendConfigs.update",
          + "container.bindings.create",
          + "container.bindings.delete",
          + "container.bindings.get",
          + "container.bindings.list",
          + "container.bindings.update",
          + "container.certificateSigningRequests.approve",
          + "container.certificateSigningRequests.create",
          + "container.certificateSigningRequests.delete",
          + "container.certificateSigningRequests.get",
          + "container.certificateSigningRequests.getStatus",
          + "container.certificateSigningRequests.list",
          + "container.certificateSigningRequests.update",
          + "container.certificateSigningRequests.updateStatus",
          + "container.clusterRoleBindings.create",
          + "container.clusterRoleBindings.delete",
          + "container.clusterRoleBindings.get",
          + "container.clusterRoleBindings.list",
          + "container.clusterRoleBindings.update",
          + "container.clusterRoles.bind",
          + "container.clusterRoles.create",
          + "container.clusterRoles.delete",
          + "container.clusterRoles.escalate",
          + "container.clusterRoles.get",
          + "container.clusterRoles.list",
          + "container.clusterRoles.update",
          + "container.clusters.create",
          + "container.clusters.delete",
          + "container.clusters.get",
          + "container.clusters.getCredentials",
          + "container.clusters.list",
          + "container.clusters.update",
          + "container.componentStatuses.get",
          + "container.componentStatuses.list",
          + "container.configMaps.create",
          + "container.configMaps.delete",
          + "container.configMaps.get",
          + "container.configMaps.list",
          + "container.configMaps.update",
          + "container.controllerRevisions.create",
          + "container.controllerRevisions.delete",
          + "container.controllerRevisions.get",
          + "container.controllerRevisions.list",
          + "container.controllerRevisions.update",
          + "container.cronJobs.create",
          + "container.cronJobs.delete",
          + "container.cronJobs.get",
          + "container.cronJobs.getStatus",
          + "container.cronJobs.list",
          + "container.cronJobs.update",
          + "container.cronJobs.updateStatus",
          + "container.csiDrivers.create",
          + "container.csiDrivers.delete",
          + "container.csiDrivers.get",
          + "container.csiDrivers.list",
          + "container.csiDrivers.update",
          + "container.csiNodeInfos.create",
          + "container.csiNodeInfos.delete",
          + "container.csiNodeInfos.get",
          + "container.csiNodeInfos.list",
          + "container.csiNodeInfos.update",
          + "container.csiNodes.create",
          + "container.csiNodes.delete",
          + "container.csiNodes.get",
          + "container.csiNodes.list",
          + "container.csiNodes.update",
          + "container.customResourceDefinitions.create",
          + "container.customResourceDefinitions.delete",
          + "container.customResourceDefinitions.get",
          + "container.customResourceDefinitions.getStatus",
          + "container.customResourceDefinitions.list",
          + "container.customResourceDefinitions.update",
          + "container.customResourceDefinitions.updateStatus",
          + "container.daemonSets.create",
          + "container.daemonSets.delete",
          + "container.daemonSets.get",
          + "container.daemonSets.getStatus",
          + "container.daemonSets.list",
          + "container.daemonSets.update",
          + "container.daemonSets.updateStatus",
          + "container.deployments.create",
          + "container.deployments.delete",
          + "container.deployments.get",
          + "container.deployments.getScale",
          + "container.deployments.getStatus",
          + "container.deployments.list",
          + "container.deployments.rollback",
          + "container.deployments.update",
          + "container.deployments.updateScale",
          + "container.deployments.updateStatus",
          + "container.endpointSlices.create",
          + "container.endpointSlices.delete",
          + "container.endpointSlices.get",
          + "container.endpointSlices.list",
          + "container.endpointSlices.update",
          + "container.endpoints.create",
          + "container.endpoints.delete",
          + "container.endpoints.get",
          + "container.endpoints.list",
          + "container.endpoints.update",
          + "container.events.create",
          + "container.events.delete",
          + "container.events.get",
          + "container.events.list",
          + "container.events.update",
          + "container.frontendConfigs.create",
          + "container.frontendConfigs.delete",
          + "container.frontendConfigs.get",
          + "container.frontendConfigs.list",
          + "container.frontendConfigs.update",
          + "container.horizontalPodAutoscalers.create",
          + "container.horizontalPodAutoscalers.delete",
          + "container.horizontalPodAutoscalers.get",
          + "container.horizontalPodAutoscalers.getStatus",
          + "container.horizontalPodAutoscalers.list",
          + "container.horizontalPodAutoscalers.update",
          + "container.horizontalPodAutoscalers.updateStatus",
          + "container.hostServiceAgent.use",
          + "container.ingresses.create",
          + "container.ingresses.delete",
          + "container.ingresses.get",
          + "container.ingresses.getStatus",
          + "container.ingresses.list",
          + "container.ingresses.update",
          + "container.ingresses.updateStatus",
          + "container.initializerConfigurations.create",
          + "container.initializerConfigurations.delete",
          + "container.initializerConfigurations.get",
          + "container.initializerConfigurations.list",
          + "container.initializerConfigurations.update",
          + "container.jobs.create",
          + "container.jobs.delete",
          + "container.jobs.get",
          + "container.jobs.getStatus",
          + "container.jobs.list",
          + "container.jobs.update",
          + "container.jobs.updateStatus",
          + "container.leases.create",
          + "container.leases.delete",
          + "container.leases.get",
          + "container.leases.list",
          + "container.leases.update",
          + "container.limitRanges.create",
          + "container.limitRanges.delete",
          + "container.limitRanges.get",
          + "container.limitRanges.list",
          + "container.limitRanges.update",
          + "container.localSubjectAccessReviews.create",
          + "container.localSubjectAccessReviews.list",
          + "container.managedCertificates.create",
          + "container.managedCertificates.delete",
          + "container.managedCertificates.get",
          + "container.managedCertificates.list",
          + "container.managedCertificates.update",
          + "container.mutatingWebhookConfigurations.create",
          + "container.mutatingWebhookConfigurations.delete",
          + "container.mutatingWebhookConfigurations.get",
          + "container.mutatingWebhookConfigurations.list",
          + "container.mutatingWebhookConfigurations.update",
          + "container.namespaces.create",
          + "container.namespaces.delete",
          + "container.namespaces.finalize",
          + "container.namespaces.get",
          + "container.namespaces.getStatus",
          + "container.namespaces.list",
          + "container.namespaces.update",
          + "container.namespaces.updateStatus",
          + "container.networkPolicies.create",
          + "container.networkPolicies.delete",
          + "container.networkPolicies.get",
          + "container.networkPolicies.list",
          + "container.networkPolicies.update",
          + "container.nodes.create",
          + "container.nodes.delete",
          + "container.nodes.get",
          + "container.nodes.getStatus",
          + "container.nodes.list",
          + "container.nodes.proxy",
          + "container.nodes.update",
          + "container.nodes.updateStatus",
          + "container.operations.get",
          + "container.operations.list",
          + "container.persistentVolumeClaims.create",
          + "container.persistentVolumeClaims.delete",
          + "container.persistentVolumeClaims.get",
          + "container.persistentVolumeClaims.getStatus",
          + "container.persistentVolumeClaims.list",
          + "container.persistentVolumeClaims.update",
          + "container.persistentVolumeClaims.updateStatus",
          + "container.persistentVolumes.create",
          + "container.persistentVolumes.delete",
          + "container.persistentVolumes.get",
          + "container.persistentVolumes.getStatus",
          + "container.persistentVolumes.list",
          + "container.persistentVolumes.update",
          + "container.persistentVolumes.updateStatus",
          + "container.petSets.create",
          + "container.petSets.delete",
          + "container.petSets.get",
          + "container.petSets.list",
          + "container.petSets.update",
          + "container.petSets.updateStatus",
          + "container.podDisruptionBudgets.create",
          + "container.podDisruptionBudgets.delete",
          + "container.podDisruptionBudgets.get",
          + "container.podDisruptionBudgets.getStatus",
          + "container.podDisruptionBudgets.list",
          + "container.podDisruptionBudgets.update",
          + "container.podDisruptionBudgets.updateStatus",
          + "container.podPresets.create",
          + "container.podPresets.delete",
          + "container.podPresets.get",
          + "container.podPresets.list",
          + "container.podPresets.update",
          + "container.podSecurityPolicies.create",
          + "container.podSecurityPolicies.delete",
          + "container.podSecurityPolicies.get",
          + "container.podSecurityPolicies.list",
          + "container.podSecurityPolicies.update",
          + "container.podSecurityPolicies.use",
          + "container.podTemplates.create",
          + "container.podTemplates.delete",
          + "container.podTemplates.get",
          + "container.podTemplates.list",
          + "container.podTemplates.update",
          + "container.pods.attach",
          + "container.pods.create",
          + "container.pods.delete",
          + "container.pods.evict",
          + "container.pods.exec",
          + "container.pods.get",
          + "container.pods.getLogs",
          + "container.pods.getStatus",
          + "container.pods.initialize",
          + "container.pods.list",
          + "container.pods.portForward",
          + "container.pods.proxy",
          + "container.pods.update",
          + "container.pods.updateStatus",
          + "container.priorityClasses.create",
          + "container.priorityClasses.delete",
          + "container.priorityClasses.get",
          + "container.priorityClasses.list",
          + "container.priorityClasses.update",
          + "container.replicaSets.create",
          + "container.replicaSets.delete",
          + "container.replicaSets.get",
          + "container.replicaSets.getScale",
          + "container.replicaSets.getStatus",
          + "container.replicaSets.list",
          + "container.replicaSets.update",
          + "container.replicaSets.updateScale",
          + "container.replicaSets.updateStatus",
          + "container.replicationControllers.create",
          + "container.replicationControllers.delete",
          + "container.replicationControllers.get",
          + "container.replicationControllers.getScale",
          + "container.replicationControllers.getStatus",
          + "container.replicationControllers.list",
          + "container.replicationControllers.update",
          + "container.replicationControllers.updateScale",
          + "container.replicationControllers.updateStatus",
          + "container.resourceQuotas.create",
          + "container.resourceQuotas.delete",
          + "container.resourceQuotas.get",
          + "container.resourceQuotas.getStatus",
          + "container.resourceQuotas.list",
          + "container.resourceQuotas.update",
          + "container.resourceQuotas.updateStatus",
          + "container.roleBindings.create",
          + "container.roleBindings.delete",
          + "container.roleBindings.get",
          + "container.roleBindings.list",
          + "container.roleBindings.update",
          + "container.roles.bind",
          + "container.roles.create",
          + "container.roles.delete",
          + "container.roles.escalate",
          + "container.roles.get",
          + "container.roles.list",
          + "container.roles.update",
          + "container.runtimeClasses.create",
          + "container.runtimeClasses.delete",
          + "container.runtimeClasses.get",
          + "container.runtimeClasses.list",
          + "container.runtimeClasses.update",
          + "container.scheduledJobs.create",
          + "container.scheduledJobs.delete",
          + "container.scheduledJobs.get",
          + "container.scheduledJobs.list",
          + "container.scheduledJobs.update",
          + "container.scheduledJobs.updateStatus",
          + "container.secrets.create",
          + "container.secrets.delete",
          + "container.secrets.get",
          + "container.secrets.list",
          + "container.secrets.update",
          + "container.selfSubjectAccessReviews.create",
          + "container.selfSubjectAccessReviews.list",
          + "container.selfSubjectRulesReviews.create",
          + "container.serviceAccounts.create",
          + "container.serviceAccounts.createToken",
          + "container.serviceAccounts.delete",
          + "container.serviceAccounts.get",
          + "container.serviceAccounts.list",
          + "container.serviceAccounts.update",
          + "container.services.create",
          + "container.services.delete",
          + "container.services.get",
          + "container.services.getStatus",
          + "container.services.list",
          + "container.services.proxy",
          + "container.services.update",
          + "container.services.updateStatus",
          + "container.statefulSets.create",
          + "container.statefulSets.delete",
          + "container.statefulSets.get",
          + "container.statefulSets.getScale",
          + "container.statefulSets.getStatus",
          + "container.statefulSets.list",
          + "container.statefulSets.update",
          + "container.statefulSets.updateScale",
          + "container.statefulSets.updateStatus",
          + "container.storageClasses.create",
          + "container.storageClasses.delete",
          + "container.storageClasses.get",
          + "container.storageClasses.list",
          + "container.storageClasses.update",
          + "container.storageStates.create",
          + "container.storageStates.delete",
          + "container.storageStates.get",
          + "container.storageStates.getStatus",
          + "container.storageStates.list",
          + "container.storageStates.update",
          + "container.storageStates.updateStatus",
          + "container.storageVersionMigrations.create",
          + "container.storageVersionMigrations.delete",
          + "container.storageVersionMigrations.get",
          + "container.storageVersionMigrations.getStatus",
          + "container.storageVersionMigrations.list",
          + "container.storageVersionMigrations.update",
          + "container.storageVersionMigrations.updateStatus",
          + "container.subjectAccessReviews.create",
          + "container.subjectAccessReviews.list",
          + "container.thirdPartyObjects.create",
          + "container.thirdPartyObjects.delete",
          + "container.thirdPartyObjects.get",
          + "container.thirdPartyObjects.list",
          + "container.thirdPartyObjects.update",
          + "container.thirdPartyResources.create",
          + "container.thirdPartyResources.delete",
          + "container.thirdPartyResources.get",
          + "container.thirdPartyResources.list",
          + "container.thirdPartyResources.update",
          + "container.tokenReviews.create",
          + "container.updateInfos.create",
          + "container.updateInfos.delete",
          + "container.updateInfos.get",
          + "container.updateInfos.list",
          + "container.updateInfos.update",
          + "container.validatingWebhookConfigurations.create",
          + "container.validatingWebhookConfigurations.delete",
          + "container.validatingWebhookConfigurations.get",
          + "container.validatingWebhookConfigurations.list",
          + "container.validatingWebhookConfigurations.update",
          + "container.volumeAttachments.create",
          + "container.volumeAttachments.delete",
          + "container.volumeAttachments.get",
          + "container.volumeAttachments.getStatus",
          + "container.volumeAttachments.list",
          + "container.volumeAttachments.update",
          + "container.volumeAttachments.updateStatus",
          + "container.volumeSnapshotClasses.create",
          + "container.volumeSnapshotClasses.delete",
          + "container.volumeSnapshotClasses.get",
          + "container.volumeSnapshotClasses.list",
          + "container.volumeSnapshotClasses.update",
          + "container.volumeSnapshotContents.create",
          + "container.volumeSnapshotContents.delete",
          + "container.volumeSnapshotContents.get",
          + "container.volumeSnapshotContents.getStatus",
          + "container.volumeSnapshotContents.list",
          + "container.volumeSnapshotContents.update",
          + "container.volumeSnapshotContents.updateStatus",
          + "container.volumeSnapshots.create",
          + "container.volumeSnapshots.delete",
          + "container.volumeSnapshots.get",
          + "container.volumeSnapshots.getStatus",
          + "container.volumeSnapshots.list",
          + "container.volumeSnapshots.update",
          + "container.volumeSnapshots.updateStatus",
          + "dataprocessing.datasources.get",
          + "dataprocessing.datasources.list",
          + "dataprocessing.groupcontrols.get",
          + "dataprocessing.groupcontrols.list",
          + "iam.roles.get",
          + "iam.roles.list",
          + "iam.serviceAccounts.actAs",
          + "iam.serviceAccounts.get",
          + "iam.serviceAccounts.list",
          + "logging.buckets.copyLogEntries",
          + "logging.buckets.create",
          + "logging.buckets.delete",
          + "logging.buckets.get",
          + "logging.buckets.list",
          + "logging.buckets.undelete",
          + "logging.buckets.update",
          + "logging.cmekSettings.get",
          + "logging.cmekSettings.update",
          + "logging.exclusions.create",
          + "logging.exclusions.delete",
          + "logging.exclusions.get",
          + "logging.exclusions.list",
          + "logging.exclusions.update",
          + "logging.fields.access",
          + "logging.locations.get",
          + "logging.locations.list",
          + "logging.logEntries.create",
          + "logging.logEntries.download",
          + "logging.logEntries.list",
          + "logging.logMetrics.create",
          + "logging.logMetrics.delete",
          + "logging.logMetrics.get",
          + "logging.logMetrics.list",
          + "logging.logMetrics.update",
          + "logging.logServiceIndexes.list",
          + "logging.logServices.list",
          + "logging.logs.delete",
          + "logging.logs.list",
          + "logging.notificationRules.create",
          + "logging.notificationRules.delete",
          + "logging.notificationRules.get",
          + "logging.notificationRules.list",
          + "logging.notificationRules.update",
          + "logging.operations.cancel",
          + "logging.operations.get",
          + "logging.operations.list",
          + "logging.privateLogEntries.list",
          + "logging.queries.create",
          + "logging.queries.delete",
          + "logging.queries.get",
          + "logging.queries.list",
          + "logging.queries.listShared",
          + "logging.queries.share",
          + "logging.queries.update",
          + "logging.queries.updateShared",
          + "logging.sinks.create",
          + "logging.sinks.delete",
          + "logging.sinks.get",
          + "logging.sinks.list",
          + "logging.sinks.update",
          + "logging.usage.get",
          + "logging.views.access",
          + "logging.views.create",
          + "logging.views.delete",
          + "logging.views.get",
          + "logging.views.list",
          + "logging.views.listLogs",
          + "logging.views.listResourceKeys",
          + "logging.views.listResourceValues",
          + "logging.views.update",
          + "monitoring.alertPolicies.create",
          + "monitoring.alertPolicies.delete",
          + "monitoring.alertPolicies.get",
          + "monitoring.alertPolicies.list",
          + "monitoring.alertPolicies.update",
          + "monitoring.dashboards.create",
          + "monitoring.dashboards.delete",
          + "monitoring.dashboards.get",
          + "monitoring.dashboards.list",
          + "monitoring.dashboards.update",
          + "monitoring.groups.create",
          + "monitoring.groups.delete",
          + "monitoring.groups.get",
          + "monitoring.groups.list",
          + "monitoring.groups.update",
          + "monitoring.metricDescriptors.create",
          + "monitoring.metricDescriptors.delete",
          + "monitoring.metricDescriptors.get",
          + "monitoring.metricDescriptors.list",
          + "monitoring.metricsScopes.link",
          + "monitoring.monitoredResourceDescriptors.get",
          + "monitoring.monitoredResourceDescriptors.list",
          + "monitoring.notificationChannelDescriptors.get",
          + "monitoring.notificationChannelDescriptors.list",
          + "monitoring.notificationChannels.create",
          + "monitoring.notificationChannels.delete",
          + "monitoring.notificationChannels.get",
          + "monitoring.notificationChannels.getVerificationCode",
          + "monitoring.notificationChannels.list",
          + "monitoring.notificationChannels.sendVerificationCode",
          + "monitoring.notificationChannels.update",
          + "monitoring.notificationChannels.verify",
          + "monitoring.publicWidgets.create",
          + "monitoring.publicWidgets.delete",
          + "monitoring.publicWidgets.get",
          + "monitoring.publicWidgets.list",
          + "monitoring.publicWidgets.update",
          + "monitoring.services.create",
          + "monitoring.services.delete",
          + "monitoring.services.get",
          + "monitoring.services.list",
          + "monitoring.services.update",
          + "monitoring.slos.create",
          + "monitoring.slos.delete",
          + "monitoring.slos.get",
          + "monitoring.slos.list",
          + "monitoring.slos.update",
          + "monitoring.timeSeries.create",
          + "monitoring.timeSeries.list",
          + "monitoring.uptimeCheckConfigs.create",
          + "monitoring.uptimeCheckConfigs.delete",
          + "monitoring.uptimeCheckConfigs.get",
          + "monitoring.uptimeCheckConfigs.list",
          + "monitoring.uptimeCheckConfigs.update",
          + "opsconfigmonitoring.resourceMetadata.list",
          + "opsconfigmonitoring.resourceMetadata.write",
          + "orgpolicy.constraints.list",
          + "orgpolicy.policies.list",
          + "orgpolicy.policy.get",
          + "recommender.commitmentUtilizationInsights.get",
          + "recommender.commitmentUtilizationInsights.list",
          + "recommender.usageCommitmentRecommendations.get",
          + "recommender.usageCommitmentRecommendations.list",
          + "resourcemanager.folders.create",
          + "resourcemanager.folders.delete",
          + "resourcemanager.folders.get",
          + "resourcemanager.folders.getIamPolicy",
          + "resourcemanager.folders.list",
          + "resourcemanager.folders.move",
          + "resourcemanager.folders.setIamPolicy",
          + "resourcemanager.folders.undelete",
          + "resourcemanager.folders.update",
          + "resourcemanager.organizations.get",
          + "resourcemanager.organizations.getIamPolicy",
          + "resourcemanager.organizations.setIamPolicy",
          + "resourcemanager.projects.create",
          + "resourcemanager.projects.get",
          + "resourcemanager.projects.getIamPolicy",
          + "resourcemanager.projects.list",
          + "resourcemanager.projects.move",
          + "resourcemanager.projects.setIamPolicy",
          + "serviceusage.quotas.get",
          + "serviceusage.services.enable",
          + "serviceusage.services.get",
          + "serviceusage.services.list",
          + "stackdriver.projects.edit",
          + "stackdriver.projects.get",
          + "stackdriver.resourceMetadata.write",
        ]
*/


module "cloudeng-powersuer" {
  source = "terraform-google-modules/iam/google//modules/custom_role_iam"

  target_level         = "org"
  target_id            = var.org_id
  role_id              = "org_corefoundation_poweruser"
  title                = "cloudeng poweruser"
  description          = "cloudeng poweruser custom role"
  base_roles           = ["roles/resourcemanager.organizationViewer", "roles/resourcemanager.folderViewer", "roles/billing.viewer", "roles/iam.organizationRoleViewer", "roles/orgpolicy.policyViewer", "roles/cloudsupport.techSupportViewer", "roles/container.viewer", "roles/compute.viewer", "roles/logging.viewer", "roles/monitoring.viewer"]
  members              = ["group:dc-amex-foundations@google.com"]
  // members              = ["group:PRC-AXP-BAE2-AppAdminGCP-C@amex.com"]
  permissions          = []
}

/* persmission for cloudeng poweruser 
permissions = [
          + "billing.accounts.get",
          + "billing.accounts.getIamPolicy",
          + "billing.accounts.getPaymentInfo",
          + "billing.accounts.getPricing",
          + "billing.accounts.getSpendingInformation",
          + "billing.accounts.getUsageExportSpec",
          + "billing.accounts.list",
          + "billing.budgets.get",
          + "billing.budgets.list",
          + "billing.credits.list",
          + "billing.resourceAssociations.list",
          + "billing.subscriptions.get",
          + "billing.subscriptions.list",
          + "cloudnotifications.activities.list",
          + "cloudsupport.properties.get",
          + "cloudsupport.techCases.get",
          + "cloudsupport.techCases.list",
          + "commerceoffercatalog.offers.get",
          + "compute.acceleratorTypes.get",
          + "compute.acceleratorTypes.list",
          + "compute.addresses.get",
          + "compute.addresses.list",
          + "compute.autoscalers.get",
          + "compute.autoscalers.list",
          + "compute.backendBuckets.get",
          + "compute.backendBuckets.list",
          + "compute.backendServices.get",
          + "compute.backendServices.getIamPolicy",
          + "compute.backendServices.list",
          + "compute.commitments.get",
          + "compute.commitments.list",
          + "compute.diskTypes.get",
          + "compute.diskTypes.list",
          + "compute.disks.get",
          + "compute.disks.getIamPolicy",
          + "compute.disks.list",
          + "compute.externalVpnGateways.get",
          + "compute.externalVpnGateways.list",
          + "compute.firewallPolicies.get",
          + "compute.firewallPolicies.getIamPolicy",
          + "compute.firewallPolicies.list",
          + "compute.firewalls.get",
          + "compute.firewalls.list",
          + "compute.forwardingRules.get",
          + "compute.forwardingRules.list",
          + "compute.globalAddresses.get",
          + "compute.globalAddresses.list",
          + "compute.globalForwardingRules.get",
          + "compute.globalForwardingRules.list",
          + "compute.globalForwardingRules.pscGet",
          + "compute.globalNetworkEndpointGroups.get",
          + "compute.globalNetworkEndpointGroups.list",
          + "compute.globalOperations.get",
          + "compute.globalOperations.getIamPolicy",
          + "compute.globalOperations.list",
          + "compute.globalPublicDelegatedPrefixes.get",
          + "compute.globalPublicDelegatedPrefixes.list",
          + "compute.healthChecks.get",
          + "compute.healthChecks.list",
          + "compute.httpHealthChecks.get",
          + "compute.httpHealthChecks.list",
          + "compute.httpsHealthChecks.get",
          + "compute.httpsHealthChecks.list",
          + "compute.images.get",
          + "compute.images.getFromFamily",
          + "compute.images.getIamPolicy",
          + "compute.images.list",
          + "compute.instanceGroupManagers.get",
          + "compute.instanceGroupManagers.list",
          + "compute.instanceGroups.get",
          + "compute.instanceGroups.list",
          + "compute.instanceTemplates.get",
          + "compute.instanceTemplates.getIamPolicy",
          + "compute.instanceTemplates.list",
          + "compute.instances.get",
          + "compute.instances.getEffectiveFirewalls",
          + "compute.instances.getGuestAttributes",
          + "compute.instances.getIamPolicy",
          + "compute.instances.getScreenshot",
          + "compute.instances.getSerialPortOutput",
          + "compute.instances.getShieldedInstanceIdentity",
          + "compute.instances.getShieldedVmIdentity",
          + "compute.instances.list",
          + "compute.instances.listReferrers",
          + "compute.interconnectAttachments.get",
          + "compute.interconnectAttachments.list",
          + "compute.interconnectLocations.get",
          + "compute.interconnectLocations.list",
          + "compute.interconnects.get",
          + "compute.interconnects.list",
          + "compute.licenseCodes.get",
          + "compute.licenseCodes.getIamPolicy",
          + "compute.licenseCodes.list",
          + "compute.licenses.get",
          + "compute.licenses.getIamPolicy",
          + "compute.licenses.list",
          + "compute.machineImages.get",
          + "compute.machineImages.getIamPolicy",
          + "compute.machineImages.list",
          + "compute.machineTypes.get",
          + "compute.machineTypes.list",
          + "compute.maintenancePolicies.get",
          + "compute.maintenancePolicies.getIamPolicy",
          + "compute.maintenancePolicies.list",
          + "compute.networkEndpointGroups.get",
          + "compute.networkEndpointGroups.getIamPolicy",
          + "compute.networkEndpointGroups.list",
          + "compute.networks.get",
          + "compute.networks.getEffectiveFirewalls",
          + "compute.networks.list",
          + "compute.networks.listPeeringRoutes",
          + "compute.nodeGroups.get",
          + "compute.nodeGroups.getIamPolicy",
          + "compute.nodeGroups.list",
          + "compute.nodeTemplates.get",
          + "compute.nodeTemplates.getIamPolicy",
          + "compute.nodeTemplates.list",
          + "compute.nodeTypes.get",
          + "compute.nodeTypes.list",
          + "compute.organizations.listAssociations",
          + "compute.projects.get",
          + "compute.publicAdvertisedPrefixes.get",
          + "compute.publicAdvertisedPrefixes.list",
          + "compute.publicDelegatedPrefixes.get",
          + "compute.publicDelegatedPrefixes.list",
          + "compute.regionBackendServices.get",
          + "compute.regionBackendServices.getIamPolicy",
          + "compute.regionBackendServices.list",
          + "compute.regionHealthCheckServices.get",
          + "compute.regionHealthCheckServices.list",
          + "compute.regionHealthChecks.get",
          + "compute.regionHealthChecks.list",
          + "compute.regionNetworkEndpointGroups.get",
          + "compute.regionNetworkEndpointGroups.list",
          + "compute.regionNotificationEndpoints.get",
          + "compute.regionNotificationEndpoints.list",
          + "compute.regionOperations.get",
          + "compute.regionOperations.getIamPolicy",
          + "compute.regionOperations.list",
          + "compute.regionSslCertificates.get",
          + "compute.regionSslCertificates.list",
          + "compute.regionTargetHttpProxies.get",
          + "compute.regionTargetHttpProxies.list",
          + "compute.regionTargetHttpsProxies.get",
          + "compute.regionTargetHttpsProxies.list",
          + "compute.regionUrlMaps.get",
          + "compute.regionUrlMaps.list",
          + "compute.regionUrlMaps.validate",
          + "compute.regions.get",
          + "compute.regions.list",
          + "compute.reservations.get",
          + "compute.reservations.list",
          + "compute.resourcePolicies.get",
          + "compute.resourcePolicies.list",
          + "compute.routers.get",
          + "compute.routers.list",
          + "compute.routes.get",
          + "compute.routes.list",
          + "compute.securityPolicies.get",
          + "compute.securityPolicies.getIamPolicy",
          + "compute.securityPolicies.list",
          + "compute.serviceAttachments.get",
          + "compute.serviceAttachments.list",
          + "compute.snapshots.get",
          + "compute.snapshots.getIamPolicy",
          + "compute.snapshots.list",
          + "compute.sslCertificates.get",
          + "compute.sslCertificates.list",
          + "compute.sslPolicies.get",
          + "compute.sslPolicies.list",
          + "compute.sslPolicies.listAvailableFeatures",
          + "compute.subnetworks.get",
          + "compute.subnetworks.getIamPolicy",
          + "compute.subnetworks.list",
          + "compute.targetGrpcProxies.get",
          + "compute.targetGrpcProxies.list",
          + "compute.targetHttpProxies.get",
          + "compute.targetHttpProxies.list",
          + "compute.targetHttpsProxies.get",
          + "compute.targetHttpsProxies.list",
          + "compute.targetInstances.get",
          + "compute.targetInstances.list",
          + "compute.targetPools.get",
          + "compute.targetPools.list",
          + "compute.targetSslProxies.get",
          + "compute.targetSslProxies.list",
          + "compute.targetTcpProxies.get",
          + "compute.targetTcpProxies.list",
          + "compute.targetVpnGateways.get",
          + "compute.targetVpnGateways.list",
          + "compute.urlMaps.get",
          + "compute.urlMaps.list",
          + "compute.urlMaps.validate",
          + "compute.vpnGateways.get",
          + "compute.vpnGateways.list",
          + "compute.vpnTunnels.get",
          + "compute.vpnTunnels.list",
          + "compute.zoneOperations.get",
          + "compute.zoneOperations.getIamPolicy",
          + "compute.zoneOperations.list",
          + "compute.zones.get",
          + "compute.zones.list",
          + "consumerprocurement.accounts.get",
          + "consumerprocurement.accounts.list",
          + "consumerprocurement.orders.get",
          + "consumerprocurement.orders.list",
          + "container.apiServices.get",
          + "container.apiServices.getStatus",
          + "container.apiServices.list",
          + "container.auditSinks.get",
          + "container.auditSinks.list",
          + "container.backendConfigs.get",
          + "container.backendConfigs.list",
          + "container.bindings.get",
          + "container.bindings.list",
          + "container.certificateSigningRequests.get",
          + "container.certificateSigningRequests.getStatus",
          + "container.certificateSigningRequests.list",
          + "container.clusterRoleBindings.get",
          + "container.clusterRoleBindings.list",
          + "container.clusterRoles.get",
          + "container.clusterRoles.list",
          + "container.clusters.get",
          + "container.clusters.list",
          + "container.componentStatuses.get",
          + "container.componentStatuses.list",
          + "container.configMaps.get",
          + "container.configMaps.list",
          + "container.controllerRevisions.get",
          + "container.controllerRevisions.list",
          + "container.cronJobs.get",
          + "container.cronJobs.getStatus",
          + "container.cronJobs.list",
          + "container.csiDrivers.get",
          + "container.csiDrivers.list",
          + "container.csiNodeInfos.get",
          + "container.csiNodeInfos.list",
          + "container.csiNodes.get",
          + "container.csiNodes.list",
          + "container.customResourceDefinitions.get",
          + "container.customResourceDefinitions.getStatus",
          + "container.customResourceDefinitions.list",
          + "container.daemonSets.get",
          + "container.daemonSets.getStatus",
          + "container.daemonSets.list",
          + "container.deployments.get",
          + "container.deployments.getScale",
          + "container.deployments.getStatus",
          + "container.deployments.list",
          + "container.endpointSlices.get",
          + "container.endpointSlices.list",
          + "container.endpoints.get",
          + "container.endpoints.list",
          + "container.events.get",
          + "container.events.list",
          + "container.frontendConfigs.get",
          + "container.frontendConfigs.list",
          + "container.horizontalPodAutoscalers.get",
          + "container.horizontalPodAutoscalers.getStatus",
          + "container.horizontalPodAutoscalers.list",
          + "container.ingresses.get",
          + "container.ingresses.getStatus",
          + "container.ingresses.list",
          + "container.initializerConfigurations.get",
          + "container.initializerConfigurations.list",
          + "container.jobs.get",
          + "container.jobs.getStatus",
          + "container.jobs.list",
          + "container.leases.get",
          + "container.leases.list",
          + "container.limitRanges.get",
          + "container.limitRanges.list",
          + "container.managedCertificates.get",
          + "container.managedCertificates.list",
          + "container.mutatingWebhookConfigurations.get",
          + "container.mutatingWebhookConfigurations.list",
          + "container.namespaces.get",
          + "container.namespaces.getStatus",
          + "container.namespaces.list",
          + "container.networkPolicies.get",
          + "container.networkPolicies.list",
          + "container.nodes.get",
          + "container.nodes.getStatus",
          + "container.nodes.list",
          + "container.operations.get",
          + "container.operations.list",
          + "container.persistentVolumeClaims.get",
          + "container.persistentVolumeClaims.getStatus",
          + "container.persistentVolumeClaims.list",
          + "container.persistentVolumes.get",
          + "container.persistentVolumes.getStatus",
          + "container.persistentVolumes.list",
          + "container.petSets.get",
          + "container.petSets.list",
          + "container.podDisruptionBudgets.get",
          + "container.podDisruptionBudgets.getStatus",
          + "container.podDisruptionBudgets.list",
          + "container.podPresets.get",
          + "container.podPresets.list",
          + "container.podSecurityPolicies.get",
          + "container.podSecurityPolicies.list",
          + "container.podTemplates.get",
          + "container.podTemplates.list",
          + "container.pods.get",
          + "container.pods.getStatus",
          + "container.pods.list",
          + "container.priorityClasses.get",
          + "container.priorityClasses.list",
          + "container.replicaSets.get",
          + "container.replicaSets.getScale",
          + "container.replicaSets.getStatus",
          + "container.replicaSets.list",
          + "container.replicationControllers.get",
          + "container.replicationControllers.getScale",
          + "container.replicationControllers.getStatus",
          + "container.replicationControllers.list",
          + "container.resourceQuotas.get",
          + "container.resourceQuotas.getStatus",
          + "container.resourceQuotas.list",
          + "container.roleBindings.get",
          + "container.roleBindings.list",
          + "container.roles.get",
          + "container.roles.list",
          + "container.runtimeClasses.get",
          + "container.runtimeClasses.list",
          + "container.scheduledJobs.get",
          + "container.scheduledJobs.list",
          + "container.serviceAccounts.get",
          + "container.serviceAccounts.list",
          + "container.services.get",
          + "container.services.getStatus",
          + "container.services.list",
          + "container.statefulSets.get",
          + "container.statefulSets.getScale",
          + "container.statefulSets.getStatus",
          + "container.statefulSets.list",
          + "container.storageClasses.get",
          + "container.storageClasses.list",
          + "container.storageStates.get",
          + "container.storageStates.getStatus",
          + "container.storageStates.list",
          + "container.storageVersionMigrations.get",
          + "container.storageVersionMigrations.getStatus",
          + "container.storageVersionMigrations.list",
          + "container.thirdPartyObjects.get",
          + "container.thirdPartyObjects.list",
          + "container.thirdPartyResources.get",
          + "container.thirdPartyResources.list",
          + "container.tokenReviews.create",
          + "container.updateInfos.get",
          + "container.updateInfos.list",
          + "container.validatingWebhookConfigurations.get",
          + "container.validatingWebhookConfigurations.list",
          + "container.volumeAttachments.get",
          + "container.volumeAttachments.getStatus",
          + "container.volumeAttachments.list",
          + "container.volumeSnapshotClasses.get",
          + "container.volumeSnapshotClasses.list",
          + "container.volumeSnapshotContents.get",
          + "container.volumeSnapshotContents.getStatus",
          + "container.volumeSnapshotContents.list",
          + "container.volumeSnapshots.get",
          + "container.volumeSnapshots.list",
          + "dataprocessing.datasources.get",
          + "dataprocessing.datasources.list",
          + "dataprocessing.groupcontrols.get",
          + "dataprocessing.groupcontrols.list",
          + "iam.roles.get",
          + "iam.roles.list",
          + "logging.buckets.get",
          + "logging.buckets.list",
          + "logging.exclusions.get",
          + "logging.exclusions.list",
          + "logging.locations.get",
          + "logging.locations.list",
          + "logging.logEntries.list",
          + "logging.logMetrics.get",
          + "logging.logMetrics.list",
          + "logging.logServiceIndexes.list",
          + "logging.logServices.list",
          + "logging.logs.list",
          + "logging.operations.get",
          + "logging.operations.list",
          + "logging.queries.create",
          + "logging.queries.delete",
          + "logging.queries.get",
          + "logging.queries.list",
          + "logging.queries.listShared",
          + "logging.queries.update",
          + "logging.sinks.get",
          + "logging.sinks.list",
          + "logging.usage.get",
          + "logging.views.get",
          + "logging.views.list",
          + "monitoring.alertPolicies.get",
          + "monitoring.alertPolicies.list",
          + "monitoring.dashboards.get",
          + "monitoring.dashboards.list",
          + "monitoring.groups.get",
          + "monitoring.groups.list",
          + "monitoring.metricDescriptors.get",
          + "monitoring.metricDescriptors.list",
          + "monitoring.monitoredResourceDescriptors.get",
          + "monitoring.monitoredResourceDescriptors.list",
          + "monitoring.notificationChannelDescriptors.get",
          + "monitoring.notificationChannelDescriptors.list",
          + "monitoring.notificationChannels.get",
          + "monitoring.notificationChannels.list",
          + "monitoring.publicWidgets.get",
          + "monitoring.publicWidgets.list",
          + "monitoring.services.get",
          + "monitoring.services.list",
          + "monitoring.slos.get",
          + "monitoring.slos.list",
          + "monitoring.timeSeries.list",
          + "monitoring.uptimeCheckConfigs.get",
          + "monitoring.uptimeCheckConfigs.list",
          + "opsconfigmonitoring.resourceMetadata.list",
          + "orgpolicy.constraints.list",
          + "orgpolicy.policies.list",
          + "orgpolicy.policy.get",
          + "recommender.commitmentUtilizationInsights.get",
          + "recommender.commitmentUtilizationInsights.list",
          + "recommender.usageCommitmentRecommendations.get",
          + "recommender.usageCommitmentRecommendations.list",
          + "resourcemanager.folders.get",
          + "resourcemanager.folders.list",
          + "resourcemanager.organizations.get",
          + "resourcemanager.organizations.getIamPolicy",
          + "resourcemanager.projects.get",
          + "resourcemanager.projects.getIamPolicy",
          + "resourcemanager.projects.list",
          + "serviceusage.quotas.get",
          + "serviceusage.services.get",
          + "serviceusage.services.list",
          + "stackdriver.projects.get",
        ]

*/






